##############################################################################
#
# Name: docker-compose.yml
#
# Function:
# 	Configure the docker-iot-dashboard collection of docker containers.
#
# Copyright:
#	This file copyright (c) 2017-2021 by
#
#		MCCI Corporation
#		3520 Krums Corners Road
#		Ithaca, NY 14850
#
#	Distributed under the terms of the license file shipped with this
#	collection.
#
# Authors:
#	Terry Moore, MCCI Corporation
#	Murugan Chandrasekar, MCCI Corporation
#	Based on work by Johan Stocking, The Things Network
#
##############################################################################

#
# Note: if you are running this manually, you must set a number of variables,
# not least IOT_DASHBOARD_DATA, which must be the path to the top data directory
# for these apps. If you use dashboard-ctl, this will be done for you.
#
# To get a list of all variables used in this file, use the following command:
# sed -n -e 's/#.*$//'  -e 's/[^$]*${\([^-:}]*\)[-:}][^$]*/\1/p' docker-compose.yml | LC_ALL=C sort -u
#
# To get a list of undocumented variables, use the following command,
# then look in the left hand column:
#
# comm <(sed -n -e 's/#.*$//' -e 's/[^$]*${\([^-:}]*\)[-:}][^$]*/\1/p' docker-compose.yml | LC_ALL=C sort -u)  <(sed -n -e '/^# IOT_[A-Z_0-9]*$/s/^# //p' docker-compose.yml | LC_ALL=C sort -u )
#
#+++
# IOT_DASHBOARD_NGINX_FQDN
#   The fully-qualified domain name to be served by NGINX.
#
# IOT_DASHBOARD_AWS_ACCESS_KEY_ID
#   The access key for AWS for backups.
#
# IOT_DASHBOARD_AWS_SECRET_ACCESS_KEY
#   The AWS API secret key for backing up influxdb data.
#
# IOT_DASHBOARD_AWS_DEFAULT_REGION
#   The AWS default region.
#
# IOT_DASHBOARD_AWS_S3_BUCKET
#   The name of S3 host bucket.
#
# IOT_DASHBOARD_AWS_S3_BUCKET_NGINX
#   The name of S3 bucket for Nginx backup
#
# IOT_DASHBOARD_AWS_S3_BUCKET_NODERED
#   The name of S3 bucket for Node-red backup
#
# IOT_DASHBOARD_AWS_S3_BUCKET_GRAFANA
#   The name of S3 bucket for Grafana backup
#
# IOT_DASHBOARD_AWS_S3_BUCKET_MQTTS
#   The name of S3 bucket for Mqtts backup
#
# IOT_DASHBOARD_AWS_S3_BUCKET_INFLUXDB
#   The S3 bucket to be used for uploading the influxdb backup data.
#
# IOT_DASHBOARD_AWS_HOST_BASE
#   The S3 endpoint is used to configure 3rd party clients(s3cmd). 
#   For Amazon:  s3.amazonaws.com , For DigitalOcean: nyc3.digitaloceanspaces.com
#
# IOT_DASHBOARD_AWS_HOST_BUCKET
#   The S3 endpoint to access host bucket.
#   For Amazon: '%(${IOT_DASHBOARD_AWS_S3_BUCKET})s.s3.amazonaws.com'
#   For DigitalOcean: '%(${IOT_DASHBOARD_AWS_S3_BUCKET}).nyc3.digitaloceanspaces.com'
#
# IOT_DASHBOARD_CERTBOT_EMAIL
#   The email address to be used for registering with Let's Encrypt.
#
# IOT_DASHBOARD_CERTBOT_FQDN
#   The domain(s) to be used by certbot when registering with Let's Encrypt.
#
# IOT_DASHBOARD_DATA
#   The path to the data directory. This must end with a '/', and must either
#   be absolute or must begin with './'. (If not, you'll get parse errors.)
#
# IOT_DASHBOARD_GRAFANA_ADMIN_PASSWORD
#   The password to be used for the admin user on first login. This is ignored
#   after the Grafana database has been built.
#
# IOT_DASHBOARD_GRAFANA_PROJECT_NAME
#   The project name to be used for the emails from the administrator.
#
# IOT_DASHBOARD_GRAFANA_LOG_MODE
#   Set the grafana log mode.
#
# IOT_DASHBOARD_GRAFANA_LOG_LEVEL
#   Set the grafana log level (e.g. debug)
#
# IOT_DASHBOARD_GRAFANA_SMTP_ENABLED
#   Set to false to disable SMTP.
#   Defaults to true
#
# IOT_DASHBOARD_GRAFANA_SMTP_SKIP_VERIFY
#   Set to false to enable SSL verification.
#   Defaults to true.
#
# IOT_DASHBOARD_GRAFANA_INSTALL_PLUGINS
#   A list of grafana plugins to install. Use (comma and space) ", " to delimit plugins.
#
# IOT_DASHBOARD_GRAFANA_SMTP_FROM_ADDRESS
#   The "from" address for Grafana emails.
#
# IOT_DASHBOARD_GRAFANA_USERS_ALLOW_SIGN_UP
#   Set to true to allow users to sign up.
#
# IOT_DASHBOARD_INFLUXDB_ADMIN_PASSWORD
#   The password to be used for the admin user by influxdb. Again, this is
#   ignored after the influxdb database has been built.
#
# IOT_DASHBOARD_INFLUXDB_INITIAL_DATABASE_NAME
#   The inital database to be created on first launch of influxdb. Ignored
#   after influxdb has been launched.
#
# IOT_DASHBOARD_MAIL_DOMAIN
#   The postfix mail domain.
#
# IOT_DASHBOARD_MAIL_HOST_NAME
#   The external FQDN for the mail host.
#
# IOT_DASHBOARD_MAIL_RELAY_IP
#   The mail relay machine, assuming that the real mailer is upstream from us.
#
# IOT_DASHBOARD_MAIL_SMTP_LOGIN
#   The mail relay login: name@example.com -- it will come from your upstream
#       provider.
#
# IOT_DASHBOARD_MAIL_SMTP_PASSWORD
#   The mail relay password
#
# IOT_DASHBOARD_MAIL_TLS_SECURITY_LEVEL
#   To enable SSL/TLS support for postfix container. set to "encrypt" to enable SSL/TLS
#   Defaults to "may" 
#
# IOT_DASHBOARD_MAIL_TLS_WRAPPERMODE
#   To enable SSL/TLS support for postfix container. set to "yes" to enable SSL/TLS
#   Defaults to "no"
#
# IOT_DASHBOARD_PORT_HTTP
#   The port to listen to for HTTP. Primarily for test purposes. Defaults to 80.
#
# IOT_DASHBOARD_PORT_HTTPS
#   The port to listen to for HTTPS. Primarily for test purposes. Defaults to 443.
#
# IOT_DASHBOARD_TIMEZONE
#   The timezone to use. Defaults to GMT.
#
# IOT_DASHBOARD_NODE_RED_VERSION
#   To Install specific version of node-red version. Defaults to latest.
#
# IOT_DASHBOARD_NODE_RED_INSTALL_MODULES
#   To Install the required node-red modules. use "space" to delimit the modules.
#
# IOT_DASHBOARD_PORT_MQTT_TCP
#   Accessing mqtt channel over TCP. Defaults to 1883.
#
# IOT_DASHBOARD_PORT_MQTT_SSL
#   Accessing mqtt channel over TLS/SSL. Defaults to 8883.
#
# IOT_DASHBOARD_PORT_MQTT_WSS
#   Accessing mqtt channel over WSS. Defaults to 8083.
#
# IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME
#   The external FQDN for the influxdb host
#
# IOT_DASHBOARD_INFLUXDB_BACKUP_EMAIL
#   To send backup mail in Influxdb container. Use "space" to delimit the MAIL IDs.
#
# IOT_DASHBOARD_CRON_BACKUP_EMAIL
#   To send backup mail in cron-backup container. Use "space" to delimit the MAIL IDs.
#---

# Also see nginx/setup.sh, which uses some additional test variables when
# debugging.
#

version: '3.8'
services:
  
  node-red:
    restart: unless-stopped
    build:
      context: ./node-red
      dockerfile: Dockerfile
      args:
        node_red_version: "${IOT_DASHBOARD_NODE_RED_VERSION:-latest}"
        node_red_contrib_ttn_version: "${IOT_DASHBOARD_NODE_RED_CONTRIB_TTN_VERSION:-latest}"
        node_red_install_modules: "${IOT_DASHBOARD_NODE_RED_INSTALL_MODULES:-}"
    user: "root"
    volumes:
      - "${IOT_DASHBOARD_DATA}node-red:/data"
    ports:
      - 1880:1880
    environment:
      TZ: "${IOT_DASHBOARD_TIMEZONE:-GMT}"
    # nodered opens ports on influxdb and postfix so it needs to be able to talk to it.
    links:
      - influxdb
      - postfix

  chirpstack-network-server:
    restart: unless-stopped
    image: chirpstack/chirpstack-network-server:3
    hostname: "chirpstack-network-server"
    volumes:
      - "${IOT_DASHBOARD_DATA}chirpstack/configuration/chirpstack-network-server:/etc/chirpstack-network-server"
    depends_on:
      - postgresql
      - mqtts
    links:
      - mqtts

  chirpstack-application-server:
    restart: unless-stopped
    image: chirpstack/chirpstack-application-server:3
    ports:
      - 8080:8080
    hostname: "chirpstack-application-server"
    volumes:
      - "${IOT_DASHBOARD_DATA}chirpstack/configuration/chirpstack-application-server:/etc/chirpstack-application-server"
    depends_on:
      - chirpstack-network-server

  chirpstack-gateway-bridge:
    restart: unless-stopped
    image: chirpstack/chirpstack-gateway-bridge:3
    ports:
      - 1700:1700/udp
    hostname: "chirpstack-gateway-bridge"
    volumes:
      - "${IOT_DASHBOARD_DATA}chirpstack/configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge"
    depends_on:
      - mqtts
      - postgresql
    links:
      - mqtts
  chirpstack-geolocation-server:
    image: chirpstack/chirpstack-geolocation-server:3
    volumes:
      - "${IOT_DASHBOARD_DATA}chirpstack/configuration/chirpstack-geolocation-server:/etc/chirpstack-geolocation-server"
    restart: unless-stopped
  postgresql:
    restart: unless-stopped
    image: postgres:9.6-alpine
    environment:
      - POSTGRES_PASSWORD=root
    volumes:
      - "${IOT_DASHBOARD_DATA}chirpstack/configuration/postgresql/initdb:/docker-entrypoint-initdb.d"
      - "${IOT_DASHBOARD_DATA}postgresqldata:/var/lib/postgresql/data"

  redis:
    restart: unless-stopped
    image: redis:5-alpine
    volumes:
      - "${IOT_DASHBOARD_DATA}redisdata:/data"
  chronograf:
    image: chronograf:latest
    ports:
      - 8888:8888
    volumes:
      - "${IOT_DASHBOARD_DATA}chronograf-storage:/var/lib/chronograf"
    depends_on:
      - influxdb
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=admin      
      #- BASE_PATH=/chronograf
      - KAPACITOR_URL=http://kapacitor:9092
    restart: unless-stopped
  kapacitor:
    image: kapacitor:latest
    environment:
      - KAPACITOR_INFLUXDB_0_URLS_0=http://influxdb:8086
      - KAPACITOR_HOSTNAME=kapacitor
      - KAPACITOR_LOGGING_LEVEL=INFO
      - KAPACITOR_REPORTING_ENABLED=false
    volumes:
      - "${IOT_DASHBOARD_DATA}kapacitor:/var/lib/kapacitor"
    ports:
      - 9092:9092
    depends_on:
      - influxdb
    restart: unless-stopped

#  pgadmin:
 #   image: dpage/pgadmin4
  #  environment:
   #   PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-test@myemail.com}
    #  PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    #  PGADMIN_CONFIG_SERVER_MODE: 'False'
      #SCRIPT_NAME: /pgadmin4
#    volumes:
#      - "${IOT_DASHBOARD_DATA}pgadmin/root:/root/.pgadmin"
#      - "${IOT_DASHBOARD_DATA}pgadmin/var:/var/lib/pgadmin"
#    ports:
#      - 5050:80
#    links:
#      - postgresql
#    depends_on:
#      - postgresql
#    restart: unless-stopped


  mqtts:
    restart: unless-stopped
    build:
      context: ./mqtts
      dockerfile: Dockerfile
    environment:
      ssl_cert: "${IOT_DASHBOARD_NGINX_FQDN:-.}"
    ports:
      - "${IOT_DASHBOARD_PORT_MQTT_TCP:-1883}:1883"   #-----> Connection on this TCP port is insecure. can be added if needed
      - "${IOT_DASHBOARD_PORT_MQTT_SSL:-8883}:8883"
      - "${IOT_DASHBOARD_PORT_MQTT_WSS:-8083}:8083"
    volumes:
      - "${IOT_DASHBOARD_DATA}docker-nginx/letsencrypt:/etc/letsencrypt"
      - "${IOT_DASHBOARD_DATA}mqtt/credentials:/etc/mosquitto/credentials"
    hostname: "${IOT_DASHBOARD_MQTT_HOST_NAME:-mqtts}"
    ports:
      - 1883:1883
  influxdb:
    restart: unless-stopped
    build:
      context: ./influxdb
      dockerfile: Dockerfile
      args:
        distrib_id: "${IOT_DASHBOARD_OS_DISTRIB_ID:-ubuntu}"
        distrib_codename: "${IOT_DASHBOARD_OS_DISTRIB_CODENAME:-focal}"
        hostname: "${IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME:-influxdb}"
        relay_ip: "postfix:25"
        domain: "${IOT_DASHBOARD_MAIL_DOMAIN:-example.com}"
    ports:
      - 8086:8086         
    hostname: "${IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME:-influxdb}"
    expose:
      - "8086"
    volumes:
      - "${IOT_DASHBOARD_DATA}influxdb:/var/lib/influxdb"
    environment:
      INFLUXDB_INIT_PWD: "${IOT_DASHBOARD_INFLUXDB_ADMIN_PASSWORD:-admin}"
      PRE_CREATE_DB: "${IOT_DASHBOARD_INFLUXDB_INITIAL_DATABASE_NAME:-demo}"
      INFLUXDB_BIND_ADDRESS: "influxdb:8088"
      INFLUXDB_BACKUP_MAIL: "${IOT_DASHBOARD_INFLUXDB_BACKUP_EMAIL:-}"
      
  grafana:
    restart: unless-stopped
    image: grafana/grafana:${IOT_DASHBOARD_GRAFANA_VERSION:-latest}
    user: "root"
    volumes:
      - /home/jose/final/grafana:/var/lib/grafana"
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "gr4f4n4"
     # GF_SERVER_DOMAIN: "${IOT_DASHBOARD_NGINX_FQDN}"
     # GF_SERVER_ROOT_URL: "https://%(domain)s/grafana/"
     # GF_SMTP_ENABLED: "${IOT_DASHBOARD_GRAFANA_SMTP_ENABLED:-true}"
     # GF_SMTP_SKIP_VERIFY: "${IOT_DASHBOARD_GRAFANA_SMTP_SKIP_VERIFY:-true}"
     # GF_SMTP_HOST: "postfix:25"
     # GF_SMTP_FROM_ADDRESS: "${IOT_DASHBOARD_GRAFANA_SMTP_FROM_ADDRESS:-grafana@localhost}"
     # GF_SMTP_FROM_NAME: "${IOT_DASHBOARD_GRAFANA_PROJECT_NAME:-Default} grafana admin"
     # GF_LOG_MODE: "${IOT_DASHBOARD_GRAFANA_LOG_MODE:-console,file}"
     # GF_LOG_LEVEL: "${IOT_DASHBOARD_GRAFANA_LOG_LEVEL:-info}"
     # GF_INSTALL_PLUGINS: "${IOT_DASHBOARD_GRAFANA_INSTALL_PLUGINS:-grafana-worldmap-panel}"
      GF_USERS_ALLOW_SIGN_UP: "${IOT_DASHBOARD_GRAFANA_USERS_ALLOW_SIGN_UP:-false}"
    # grafana opens ports on influxdb and postfix, so it needs to be able to talk to it.
    links:
      - influxdb
      - postfix
    ports:
      - 3000:3000
  postfix:
    restart: unless-stopped
    build:
      context: ./postfix
      dockerfile: Dockerfile
      args:
        hostname: "${IOT_DASHBOARD_MAIL_HOST_NAME:-iotmail}"
        relay_ip: "${IOT_DASHBOARD_MAIL_RELAY_IP:-}"
        domain: "${IOT_DASHBOARD_MAIL_DOMAIN:-example.com}"
        smtp_login: "${IOT_DASHBOARD_MAIL_SMTP_LOGIN:-}"
        smtp_password: "${IOT_DASHBOARD_MAIL_SMTP_PASSWORD:-}"
      # Enable SSL/TLS postfix communication
        tls_security_level: "${IOT_DASHBOARD_MAIL_TLS_SECURITY_LEVEL:-may}" 
        tls_wrappermode: "${IOT_DASHBOARD_MAIL_TLS_WRAPPERMODE:-no}"
    expose:
      - "25"
    hostname: "${IOT_DASHBOARD_MAIL_HOST_NAME:-iotmail}"

  cron-backup:
    restart: unless-stopped
    build:
      context: ./cron-backup
      dockerfile: Dockerfile
      args:
        hostname: "${IOT_DASHBOARD_CRONBACKUP_MAIL_HOST_NAME:-cron-backup}"
        relay_ip: "postfix:25"
        domain: "${IOT_DASHBOARD_MAIL_DOMAIN:-example.com}"
      # Moving backup data to S3 Bucket
        AWS_ACCESS_KEY_ID: "${IOT_DASHBOARD_AWS_ACCESS_KEY_ID:-.}"
        AWS_SECRET_ACCESS_KEY: "${IOT_DASHBOARD_AWS_SECRET_ACCESS_KEY:-.}"
        AWS_DEFAULT_REGION: "${IOT_DASHBOARD_AWS_DEFAULT_REGION:-.}"
        AWS_HOST_BASE: "${IOT_DASHBOARD_AWS_HOST_BASE:-.}"
        AWS_HOST_BUCKET: "${IOT_DASHBOARD_AWS_HOST_BUCKET:-.}"
    hostname: "${IOT_DASHBOARD_CRONBACKUP_MAIL_HOST_NAME:-cron-backup}"
    volumes:
      - "${IOT_DASHBOARD_DATA}grafana:/grafana"
      - "${IOT_DASHBOARD_DATA}node-red:/nodered"
      - "${IOT_DASHBOARD_DATA}docker-nginx:/nginx"
      - "${IOT_DASHBOARD_DATA}mqtt/credentials:/mqtts"
    environment:
      CRON_BACKUP_MAIL: "${IOT_DASHBOARD_CRON_BACKUP_EMAIL:-}"
      SOURCE_NAME: "${IOT_DASHBOARD_CERTBOT_FQDN}"
      S3_BUCKET_NODERED: "${IOT_DASHBOARD_AWS_S3_BUCKET_NODERED:-.}"
      S3_BUCKET_GRAFANA: "${IOT_DASHBOARD_AWS_S3_BUCKET_GRAFANA:-.}"
      S3_BUCKET_NGINX: "${IOT_DASHBOARD_AWS_S3_BUCKET_NGINX:-.}"
      S3_BUCKET_MQTTS: "${IOT_DASHBOARD_AWS_S3_BUCKET_MQTTS:-.}"
  
 
### end of file ###
